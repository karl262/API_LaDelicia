{
  "stats": {
    "suites": 1,
    "tests": 25,
    "passes": 0,
    "pending": 0,
    "failures": 25,
    "start": "2024-11-12T00:43:28.760Z",
    "end": "2024-11-12T00:43:29.299Z",
    "duration": 539,
    "testsRegistered": 25,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0ee901e1-f250-48a6-afbe-cace9d117907",
      "title": "",
      "fullFile": "C:\\API\\TEAM_6\\API_LA_DELICIA\\Employees\\test\\Employees.test.js",
      "file": "\\test\\Employees.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
          "title": "Employees Service",
          "fullFile": "C:\\API\\TEAM_6\\API_LA_DELICIA\\Employees\\test\\Employees.test.js",
          "file": "\\test\\Employees.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "debería permitir crear un nuevo empleado",
              "fullTitle": "Employees Service debería permitir crear un nuevo empleado",
              "timedOut": false,
              "duration": 316,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        middle_name: 'Pérez',\n        last_name: 'López',\n        street_address: 'Av. Principal 123',\n        city_address: 'Ciudad',\n        postal_code: '12345',\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('id');",
              "err": {
                "message": "AssertionError: expected 401 to equal 201",
                "estack": "AssertionError: expected 401 to equal 201\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:20:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 201\n"
              },
              "uuid": "874a7a73-a1ff-44b1-89bf-50e50c6d99b5",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería fallar al crear un empleado con datos incompletos",
              "fullTitle": "Employees Service debería fallar al crear un empleado con datos incompletos",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        last_name: 'López'\n    });\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:31:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "13a25f42-6397-4399-8dc6-d7ffd0180b7c",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería permitir crear un empleado con todos los datos opcionales",
              "fullTitle": "Employees Service debería permitir crear un empleado con todos los datos opcionales",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Ana',\n        middle_name: 'Sánchez',\n        last_name: 'García',\n        street_address: 'Calle Secundaria 456',\n        city_address: 'Otro Ciudad',\n        postal_code: '67890',\n        cellphone_number: '5559876543',\n    });\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('id');",
              "err": {
                "message": "AssertionError: expected 401 to equal 201",
                "estack": "AssertionError: expected 401 to equal 201\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:46:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 201\n"
              },
              "uuid": "1e42b79a-d552-4980-b22e-1b99e4aee782",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería obtener todos los empleados",
              "fullTitle": "Employees Service debería obtener todos los empleados",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/employees');\n\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
              "err": {
                "message": "AssertionError: expected 401 to equal 200",
                "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:53:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 200\n"
              },
              "uuid": "c6d4e198-272e-49e3-818e-20dfbda91fb6",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería obtener un empleado por ID",
              "fullTitle": "Employees Service debería obtener un empleado por ID",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newEmployee = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Carlos',\n        middle_name: 'Rodríguez',\n        last_name: 'Martínez',\n        street_address: 'Calle Secundaria 456',\n        city_address: 'Ciudad',\n        postal_code: '54321',\n        cellphone_number: '5557654321',\n    });\nconst res = await request(app).get(`/api/employees/${newEmployee.body.id}`);\n\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('id', newEmployee.body.id);",
              "err": {
                "message": "AssertionError: expected 401 to equal 200",
                "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:72:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 200\n"
              },
              "uuid": "40813284-1877-48e7-bdaa-68506e48ca53",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería retornar 404 para un empleado no existente",
              "fullTitle": "Employees Service debería retornar 404 para un empleado no existente",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/employees/99999');\n\nexpect(res.status).to.equal(404);",
              "err": {
                "message": "AssertionError: expected 401 to equal 404",
                "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:79:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 404\n"
              },
              "uuid": "ff802796-0729-4f03-adfc-16ff5b68660e",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería actualizar un empleado existente",
              "fullTitle": "Employees Service debería actualizar un empleado existente",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newEmployee = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Luis',\n        middle_name: 'Martín',\n        last_name: 'Hernández',\n        street_address: 'Avenida Tercera 789',\n        city_address: 'Ciudad',\n        postal_code: '67890',\n        cellphone_number: '5559876543',\n    });\nconst res = await request(app)\n    .put(`/api/employees/${newEmployee.body.id}`)\n    .send({\n        name_employee: 'Luis',\n        middle_name: 'Martín',\n        last_name: 'Hernández',\n        street_address: 'Avenida Modificada 789',\n        city_address: 'Ciudad Nueva',\n        postal_code: '67891',\n        cellphone_number: '5559876544',\n    });\n\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('street_address', 'Avenida Modificada 789');",
              "err": {
                "message": "AssertionError: expected 401 to equal 200",
                "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:107:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 200\n"
              },
              "uuid": "3b7fef62-ce93-4f26-b869-39baedc40f6d",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería retornar 404 al intentar actualizar un empleado no existente",
              "fullTitle": "Employees Service debería retornar 404 al intentar actualizar un empleado no existente",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .put('/api/employees/99999')\n    .send({\n        name_employee: 'Nombre no existente',\n        street_address: 'Dirección nueva',\n    });\n\nexpect(res.status).to.equal(404);",
              "err": {
                "message": "AssertionError: expected 401 to equal 404",
                "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:119:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 404\n"
              },
              "uuid": "fad54b73-deff-49c9-bd16-d505c8c5afe4",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería eliminar un empleado existente",
              "fullTitle": "Employees Service debería eliminar un empleado existente",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newEmployee = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Mario',\n        middle_name: 'José',\n        last_name: 'García',\n        street_address: 'Calle Falsa 123',\n        city_address: 'Ciudad X',\n        postal_code: '45678',\n        cellphone_number: '5553210987',\n    });\nconst res = await request(app).delete(`/api/employees/${newEmployee.body.id}`);\n\nexpect(res.status).to.equal(204);",
              "err": {
                "message": "AssertionError: expected 401 to equal 204",
                "estack": "AssertionError: expected 401 to equal 204\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:137:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 204\n"
              },
              "uuid": "25dd476f-eb25-4542-a06d-4b54741063e7",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería retornar 404 al intentar eliminar un empleado no existente",
              "fullTitle": "Employees Service debería retornar 404 al intentar eliminar un empleado no existente",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).delete('/api/employees/99999');\n\nexpect(res.status).to.equal(404);",
              "err": {
                "message": "AssertionError: expected 401 to equal 404",
                "estack": "AssertionError: expected 401 to equal 404\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:143:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 404\n"
              },
              "uuid": "87c2a359-0594-442e-b1aa-a5864300f669",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería permitir buscar empleados por nombre",
              "fullTitle": "Employees Service debería permitir buscar empleados por nombre",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Ana',\n        middle_name: 'Sofia',\n        last_name: 'Ramírez',\n        street_address: 'Calle Corta 101',\n        city_address: 'Ciudad Z',\n        postal_code: '98765',\n        cellphone_number: '5551098765',\n    });\nconst res = await request(app).get('/api/employees?name=A');\n\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
              "err": {
                "message": "AssertionError: expected 401 to equal 200",
                "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:161:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 200\n"
              },
              "uuid": "17752aa0-8ce6-4f12-a4f5-d2cfa22e7765",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería retornar error 400 si se intenta buscar con un parámetro inválido",
              "fullTitle": "Employees Service debería retornar error 400 si se intenta buscar con un parámetro inválido",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app).get('/api/employees?invalidParam=test');\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:169:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "f7257314-c676-4708-9c9c-4118877b3324",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar que el name_employee no contenga números",
              "fullTitle": "Employees Service debería validar que el name_employee no contenga números",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan123',\n        middle_name: 'Pérez',\n        last_name: 'López',\n        street_address: 'Av. Principal 123',\n        city_address: 'Ciudad',\n        postal_code: '12345',\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:185:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "bd7f8a40-d0c9-4ba8-943f-d77c3e1e2fd4",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar que el middle_name no contenga caracteres especiales",
              "fullTitle": "Employees Service debería validar que el middle_name no contenga caracteres especiales",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        middle_name: 'Pérez@#$',\n        last_name: 'López',\n        street_address: 'Av. Principal 123',\n        city_address: 'Ciudad',\n        postal_code: '12345',\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:201:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "298669ee-67cf-4b9d-ba99-5a8c3ad51310",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar que el last_name no esté vacío",
              "fullTitle": "Employees Service debería validar que el last_name no esté vacío",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        middle_name: 'Pérez',\n        last_name: '',\n        street_address: 'Av. Principal 123',\n        city_address: 'Ciudad',\n        postal_code: '12345',\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:217:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "8df11534-b468-450a-a4d3-4e7d73d95f77",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar el formato del postal_code (5 dígitos)",
              "fullTitle": "Employees Service debería validar el formato del postal_code (5 dígitos)",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        middle_name: 'Pérez',\n        last_name: 'López',\n        street_address: 'Av. Principal 123',\n        city_address: 'Ciudad',\n        postal_code: '123456', // 6 dígitos\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:233:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "ee4cf091-4281-4251-a550-7596035096bf",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar el formato del cellphone_number (10 dígitos)",
              "fullTitle": "Employees Service debería validar el formato del cellphone_number (10 dígitos)",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        middle_name: 'Pérez',\n        last_name: 'López',\n        street_address: 'Av. Principal 123',\n        city_address: 'Ciudad',\n        postal_code: '12345',\n        cellphone_number: '55512', // menos de 10 dígitos\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:249:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "8fdce7ca-751c-4edf-be84-92a510e4c515",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar que el city_address no esté vacío",
              "fullTitle": "Employees Service debería validar que el city_address no esté vacío",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        middle_name: 'Pérez',\n        last_name: 'López',\n        street_address: 'Av. Principal 123',\n        city_address: '',\n        postal_code: '12345',\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:265:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "ed38184f-f476-432f-aa88-42b9e4ca97d1",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar que el street_address tenga un mínimo de caracteres",
              "fullTitle": "Employees Service debería validar que el street_address tenga un mínimo de caracteres",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        middle_name: 'Pérez',\n        last_name: 'López',\n        street_address: 'Av',  // muy corto\n        city_address: 'Ciudad',\n        postal_code: '12345',\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:281:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "57d448e0-4624-4557-a370-fae5ae2a1db3",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar que no se duplique el cellphone_number",
              "fullTitle": "Employees Service debería validar que no se duplique el cellphone_number",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Primer empleado\nawait request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        middle_name: 'Pérez',\n        last_name: 'López',\n        street_address: 'Av. Principal 123',\n        city_address: 'Ciudad',\n        postal_code: '12345',\n        cellphone_number: '5551234567',\n    });\n    \n// Intentar crear otro empleado con el mismo número\nconst res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Pedro',\n        middle_name: 'Gómez',\n        last_name: 'Sánchez',\n        street_address: 'Otra Calle 456',\n        city_address: 'Ciudad',\n        postal_code: '12345',\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:311:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "332d0f91-6946-40fb-87e2-8f31adb9edf5",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar la longitud máxima del name_employee",
              "fullTitle": "Employees Service debería validar la longitud máxima del name_employee",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'JuanCarlosAntonioJoséMaríaFranciscoJavier', // nombre muy largo\n        middle_name: 'Pérez',\n        last_name: 'López',\n        street_address: 'Av. Principal 123',\n        city_address: 'Ciudad',\n        postal_code: '12345',\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:327:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "ca02299a-653e-4e58-8403-2fae22d834b3",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar que el middle_name no exceda la longitud máxima",
              "fullTitle": "Employees Service debería validar que el middle_name no exceda la longitud máxima",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        middle_name: 'PérezGonzálezRodríguezMartínezSánchez', // muy largo\n        last_name: 'López',\n        street_address: 'Av. Principal 123',\n        city_address: 'Ciudad',\n        postal_code: '12345',\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:343:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "5a4e1921-5c95-401a-80e5-db579cceda1f",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar que el last_name no exceda la longitud máxima",
              "fullTitle": "Employees Service debería validar que el last_name no exceda la longitud máxima",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        middle_name: 'Pérez',\n        last_name: 'LópezGarcíaRodríguezMartínezGonzález', // muy largo\n        street_address: 'Av. Principal 123',\n        city_address: 'Ciudad',\n        postal_code: '12345',\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:359:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "9046c222-fa0d-4ab6-b7a6-0904d2058550",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar caracteres especiales en el city_address",
              "fullTitle": "Employees Service debería validar caracteres especiales en el city_address",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        middle_name: 'Pérez',\n        last_name: 'López',\n        street_address: 'Av. Principal 123',\n        city_address: 'Ciudad@#$%',\n        postal_code: '12345',\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:375:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "62568e67-4f51-4169-8c65-c4c8963a21ac",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "debería validar que el postal_code solo contenga números",
              "fullTitle": "Employees Service debería validar que el postal_code solo contenga números",
              "timedOut": false,
              "duration": 7,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n    .post('/api/employees')\n    .send({\n        name_employee: 'Juan',\n        middle_name: 'Pérez',\n        last_name: 'López',\n        street_address: 'Av. Principal 123',\n        city_address: 'Ciudad',\n        postal_code: '123A5', // contiene una letra\n        cellphone_number: '5551234567',\n    });\n\nexpect(res.status).to.equal(400);",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (file:///C:/API/TEAM_6/API_LA_DELICIA/Employees/test/Employees.test.js:391:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "b18f606c-bb8d-4d38-85d6-1332fd71b977",
              "parentUUID": "1dc8a39e-7b83-4191-8b92-d21c9923a4b0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "874a7a73-a1ff-44b1-89bf-50e50c6d99b5",
            "13a25f42-6397-4399-8dc6-d7ffd0180b7c",
            "1e42b79a-d552-4980-b22e-1b99e4aee782",
            "c6d4e198-272e-49e3-818e-20dfbda91fb6",
            "40813284-1877-48e7-bdaa-68506e48ca53",
            "ff802796-0729-4f03-adfc-16ff5b68660e",
            "3b7fef62-ce93-4f26-b869-39baedc40f6d",
            "fad54b73-deff-49c9-bd16-d505c8c5afe4",
            "25dd476f-eb25-4542-a06d-4b54741063e7",
            "87c2a359-0594-442e-b1aa-a5864300f669",
            "17752aa0-8ce6-4f12-a4f5-d2cfa22e7765",
            "f7257314-c676-4708-9c9c-4118877b3324",
            "bd7f8a40-d0c9-4ba8-943f-d77c3e1e2fd4",
            "298669ee-67cf-4b9d-ba99-5a8c3ad51310",
            "8df11534-b468-450a-a4d3-4e7d73d95f77",
            "ee4cf091-4281-4251-a550-7596035096bf",
            "8fdce7ca-751c-4edf-be84-92a510e4c515",
            "ed38184f-f476-432f-aa88-42b9e4ca97d1",
            "57d448e0-4624-4557-a370-fae5ae2a1db3",
            "332d0f91-6946-40fb-87e2-8f31adb9edf5",
            "ca02299a-653e-4e58-8403-2fae22d834b3",
            "5a4e1921-5c95-401a-80e5-db579cceda1f",
            "9046c222-fa0d-4ab6-b7a6-0904d2058550",
            "62568e67-4f51-4169-8c65-c4c8963a21ac",
            "b18f606c-bb8d-4d38-85d6-1332fd71b977"
          ],
          "pending": [],
          "skipped": [],
          "duration": 486,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}